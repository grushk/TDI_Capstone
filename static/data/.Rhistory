class(training$SuperPlasticizer[1])
View(training)
class(training$SuperPlasticizer[1])
class(training$SuperPlasticizer)
class(as.numeric(training$SuperPlasticizer))
len(as.numeric(training$SuperPlasticizer))
nrow(as.numeric(training$SuperPlasticizer))
length(as.numeric(training$SuperPlasticizer))
training$SuperPlasticizer[1]
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qqnorm(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(training)
colnames(training[grepl("^IL",colnames(training))])
cols<-training[grepl("^IL",colnames(training))]
colsTest<-testing[grepl("^IL",colnames(training))]
View(training)
qplot(diagnosis,IL_11,data=training,geom="dentisty")
qplot(diagnosis,IL_11,data=training,geom="density")
qplot(diagnosis,IL_11,data=training)
qplot(diagnosis,IL_11,data=training,geom="boxplot")
colnames(training[grepl("^IL",colnames(training))])
qplot(diagnosis,IL_11,data=training,geom="boxplot")
qplot(diagnosis,IL_17E,data=training,geom="boxplot")
qplot(diagnosis,IL_4,data=training,geom="boxplot")
qplot(diagnosis,IL_6_Receptor,data=training,geom="boxplot")
preObj<-preProcess(training[grepl("^IL",colnames(training))],method=c("center","scale"))
preObj
preObj<-preProcess(training[grepl("^IL",colnames(training))],method=c("center","scale"),thresh=.8)
preObj
preOb<-preProcess(training[grepl("^IL",colnames(training))],method="pca",thresh=.8)
preOb
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainIL<-training[grepl("^IL",colnames(training)) | colnames(training)=="diagnosis"]
View(trainIL)
testIL<-testing[grepl("^IL",colnames(training)) | colnames(training)=="diagnosis"]
preOb<-preProcess(trainIL,method="pca",thresh=.8)
preOb<-preProcess(trainIL[,-1],method="pca",thresh=.8)
preOb
pcs<-predict(preOb,trainIL[,-1])$diagnosis
pcs<-predict(preOb,trainIL[-1])$diagnosis
preOb<-preProcess(trainIL[-1],method="pca",thresh=.8)
pcs<-predict(preOb,trainIL[-1])$diagnosis
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
install.packages('e1071', dependencies=TRUE)
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
plot(x,y)
abline(lm(y~x))
t.test(lm(y~x))
t.test(0.1885)
t.test(x,y)
predict(lm(y~x))
t.test(predict(lm(y~x)))
fit<-lm(y~x)
summary(fit)
?mtcars
data(mtcars)
fit<-lm(mpg~wt)
fit<-lm(mpg~wt,data=mtcars)
summary(fit)
confint(fit)
?predict
predict(fit,newdata=3)
predict(fit,newdata=data.frame(wt=3))
confint(predict(fit,newdata=data.frame(wt=3)))
21.25+5.77
21.25-5.77
coef(predict(fit,newdata=data.frame(wt=3)))
predict(fit,newdata=data.frame(wt=3))
confint(fit)
41.119753-4.202635*3
fit
predict(fit,newdata=data.frame(wt=3),interval="confidence")
fit<-lm(mpg~(wt*1000),data=mtcars)
fit<-lm(mpg~I(wt*1000),data=mtcars)
predict(fit,newdata=data.frame(wt=3000),interval="confidence")
fit<-lm(mpg~I(wt/1000),data=mtcars)
predict(fit,newdata=data.frame(wt=3000),interval="confidence")
fit<-lm(mpg~wt,data=mtcars)
predict(fit,newdata=data.frame(wt=3000),interval="confidence")
predict(fit,newdata=data.frame(wt=3),interval="confidence")
predict(fit,newdata=data.frame(wt=3),interval="prediction")
predict(fit,newdata=data.frame(wt=2),interval="confidence")
predict(fit,newdata=data.frame(wt=c(1,2,3),interval="confidence")
)
predict(fit,newdata=data.frame(wt=c(1,2,3)),interval="confidence")
predict(fit,newdata=data.frame(wt=c(1,3,5)),interval="confidence")
c<-5
cf1<-summary(fit)$coefficients
cf1
fit4<-lm(y~I(x+c)) # add some constant c
cf2<-summary(fit4)$coefficients
cf2
b0<-cf1[1,1]
b1<-cf1[2,1]
b0 - c*b1
fit5<-lm(y ~ 1)
fit6<-lm(y ~ x - 1)
plot(x,y)
abline(fit,col="red")
abline(fit5,col="blue")
abline(fit6,col="green")
fit5<-lm(mpg ~ 1,data=mtcars)
fit6<-lm(mpg ~ wt - 1,dat=mtcars)
plot(mpg,wt,data=mtcars)
abline(fit,col="red")
abline(fit5,col="blue")
abline(fit6,col="green")
fit5<-lm(mpg ~ 1,data=mtcars)
fit6<-lm(mpg ~ wt - 1,dat=mtcars)
plot(mtcar$wt,mtcars$mpg)
abline(fit,col="red")
abline(fit5,col="blue")
abline(fit6,col="green")
fit5<-lm(mpg ~ 1,data=mtcars)
fit6<-lm(mpg ~ wt - 1,dat=mtcars)
plot(mtcars$wt,mtcars$mpg)
abline(fit,col="red")
abline(fit5,col="blue")
abline(fit6,col="green")
anova(fit)
anova(fit5)
anova(fit6)
278.32/1126
fit<-lm(mpg~wt,data=mtcars)
predict(fit,newdata=data.frame(wt=mean(mtcars$wt)),interval="confidence")
d<-mtcars
d$cyl<-factor(d$cyl)
lm<-lm(mpg~cyl+wt,data=d)
lm
lm<-lm(mpg~cyl+wt,data=mtcars)
lm
lm<-lm(mpg~cyl+wt,data=d)
lm2<-lm(mpg~cyl,data=d)
lm2
lm
lrtest(lm,lm2)
install.packages(lmtest)
install.packages('lmtest')
library(lmtest)
lrtest(lm,lm2)
anova(lm,lm2)
lm3<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm3
lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
influence.measures(x,y)
influence.measures(data.frame(x,y))
influence.measures(lm(y~x))
round(influence.measures(lm(y~x)),4)
influence.measures(lm(y~x))
options(digits=4)
influence.measures(lm(y~x))
options(digits=4,scipen=F)
influence.measures(lm(y~x))
options(digits=4,scipen=5)
influence.measures(lm(y~x))
options(digits=3,scipen=5)
influence.measures(lm(y~x))
data(mtcars)
fit1 <- lm(mpg~factor(cyl) + wt, data=mtcars)
fit2 <- update(fit1, mpg~factor(cyl) + wt + wt*factor(cyl))
summary(fit1)
summary(fit2)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain<-createDataPartition(y=segmentationOriginal$Case,p=.6,list=F)
set.seed(125)
modFit<-train(Case~.,method="rpart",data="segmentationOriginal")
modFit<-train(Case~.,method="rpart",data=segmentationOriginal)
modFit
predict(modFit,newdata=c(23000,10,2))
modFit$finalModel
train<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
modFit<-train(Case~.,method="rpart",data=train)
modFit$finalModel
fancyRpartPlot(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
modFit<-train(Class~.,method="rpart",data=train)
fancyRpartPlot(modFit$finalModel)
train<-segmentationOriginal[Case="Train",]
train<-segmentationOriginal[Case=="Train",]
train<-segmentationOriginal[segmentationOriginal$Case=="Train",]
modFit<-train(Class~.,method="rpart",data=train[,-2])
fancyRpartPlot(modFit$finalModel)
45*pow(10,3)
45*power(10,3)
45*1000
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
treeModel <- train(Area ~ ., data=olive, method="rpart2")
newdata = as.data.frame(t(colMeans(olive)))
predict(treeModel,newdata)
newdata
treeModel <- train(Area ~ ., data=olive, method="rpart")
predict(treeModel,newdata)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
modFit(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
m<-missClass(testSA$chd,predict(modFit,testSA))
n<-missClass(trainSA$chd,predict(modFit,trainSA))
round(m,2)
round(n,2)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
set.seed(33833)
modFit<-train(y~.,data=vowel.train,method="rf")
varImp(modFit$finalModel)
sort(varImp(modFit$finalModel))
sort(varImp(modFit$finalModel,2))
a<-varImp(modFit$finalModel)
sort(a)
sort(a[,1])
sort(a[,1],descending=T)
sort(a[,1],decreasing=T)
a<-sort(a[,1],decreasing=T)
a
a<-varImp(modFit$finalModel)
a<-a[sort(a[,1],decreasing=T),]
a
a<-varImp(modFit$finalModel)
a<-a[,sort(a[,1],decreasing=T)]
a<-a[a=sort(a[,1],decreasing=T),]
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
View(vowel.test)
set.seed(33833)
rfFit<-train(y~.,data=vowel.train,method="rf")
library(aret)
library(caret)
rfFit<-train(y~.,data=vowel.train,method="rf")
gbmFit<-train(y~.,data=vowel.train,method="gbm")
rfFit
rfPred<-predict(rfFit,vowel.test)
gbmPred<-predit(gbmFit,vowel.test)
gbmPred<-predict(gbmFit,vowel.test)
rfpred
rfPred
rfA<-rfPred[vowel.test$y]
length(rfA)
length(rfA)/nrow(vowel.test)
rfA<-rfPred[rfPred==vowel.test$y]
length(rfA)/nrow(vowel.test)
gbmA<-gbmPred[rfPred==vowel.test$y]
gbmA
length(gbmA)/nrow(vowel.test)
gbmA<-gbmPred[gbmPred==vowel.test$y]
length(gbmA)/nrow(vowel.test)
comb<-data.frame(rfPred,gbmPred,y=vowel.test$y)
combFit<-train(y~.,method="gam",data=comb)
combPred<-predict(combFit,vowel.test)
cA<-cPred[cPred==vowel.test$y]
cA<-cPred[combPred==vowel.test$y]
cA<-combPred[combPred==vowel.test$y]
length(cA)/nrow(vowel.test)
confusionMatrix(vowel.test$y, rfPred)$overall['Accuracy']
confusionMatrix(vowel.test$y, gbmPred)$overall['Accuracy']
confusionMatrix(vowel.test$y, combPred)$overall['Accuracy']
gbmF <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
gbmPred<-predict(gbmF,vowel.test)
confusionMatrix(vowel.test$y, gbmPred)$overall['Accuracy']
seed()
seed
get.seed()
set.seed(33833)
gbmF <- train(y~., data=vowel.train, method="gbm",verbose=F)
gbmPred<-predict(gbmF,vowel.test)
confusionMatrix(vowel.test$y, gbmPred)$overall['Accuracy']
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmodel <- train(diagnosis~., data=training, method="rf",verbose=F)
gbmmodel <- train(diagnosis~., data=training, method="gbm",verbose=F)
ldamodel <- train(diagnosis~., data=training, method="lda",verbose=F)
rfresult <- predict(rfmodel, testing)
gbmresult <- predict(gbmmodel, testing)
ldaresult <- predict(ldamodel, testing)
combined.data <- data.frame(rfresult, gbmresult, ldaresult, diagnosis=testing$diagnosis)
combined.model <- train(diagnosis~., data=combined.data, method="rf")
combined.result <- predict(combined.model, testing)
confusionMatrix(testing$diagnosis, rfresult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, gbmresult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, ldaresult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, combined.result)$overall['Accuracy']
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lasso.model <- train(CompressiveStrength~., data=training, method="lasso")
plot.enet(lasso.model$finalModel, xvar="penalty", use.color=TRUE)
library(lubridate)  # For year() function below
dat = read.csv("~/Downloads/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
?bats
plot(data)
plot(dat)
fit<-bats(training$date~training$visitsTumblr)
fit<-bats(training)
fit<-bats(training$date)
fit<-bats(training$visitsTumblr)
fit<-bats(training[,2:3])
fit
fit<-bats(training$visitsTumblr,level=95,h=nrow(testing))
fit<-bats(training$visitsTumblr,level=95,h=235)
fit<-bats(training$visitsTumblr)
fore<-forecast(fit,level=95,h=235)
fore
plot(fore)
accuracy(fore,testing&visitsTumblr)
fitBATS <- bats(tstrain)
tdates<-nrow(testing)
fcastBATS <- forecast(fitBATS, level = 95, h = tdates)
accuracy(fcastBATS,testing&visitsTumblr)
accuracy(fcastBATS,testing$visitsTumblr)
result <- c()
l <- length(fcastBATS$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcastBATS$lower[i] < x & x < fcastBATS$upper[i]
result <- c(result, a)
}
sum(result)/l * 100
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
?shuttle
lm(use~wind,data=shuttle)
lm<-lm(use~wind,data=shuttle)
plot(lm)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
shuttle$windFactor <- factor(shuttle$wind)
lm<-glm(use~wind,data=shuttle)
lm<-glm(use~wind,data=shuttle,family='binomial')
summary(lm)
logAutolander1 <- glm(shuttle$useNum ~ shuttle$windFactor, family='binomial')
summary(logAutolander1)
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
fit1 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
fit1
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windtail2)/exp(windhead2)
fit <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
exp(coef(fit))
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
exp(coef(fit))[1]/exp(coef(fit))[2]
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail/windhead)
fit <- glm(count ~ spray  - 1, family = "poisson", data = InsectSprays)
exp(fit$coef[1])/exp(fit$coef[2])
fit
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit1
fit1 <- lm(mpg ~ factor(cyl) + offset(wt), data = mtcars)
fit1
fit1 <- lm(mpg ~ factor(cyl) + offset(log(10)+wt), data = mtcars)
fit1
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
lhs <- function(x) ifelse(x < 0,0-x,0)
rhs <- function(x) ifelse(x > 0,x-0,0)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
py
plot(py)
plot(py~x)
plot(py~x)
py[2]-py[1]
py[7]-py[6]
lines(x, py)
shiny::runApp('Desktop/R/capstone')
library(dplyr)
df<-fread('small_sample.csv')
library(data.table)
library(data.table)
df<-fread('small_sample.csv')
setwd("~/Documents/TDI/capstone_data")
df<-fread('small_sample.csv')
setwd("~/Desktop/capstone/static/data")
df<-fread('small_sample.csv')
View(df)
